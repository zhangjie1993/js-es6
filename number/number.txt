五.数值的扩展
(1)二进制和八进制表示法
1.ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。
eg:	0b111110111 === 503 // true
	0o767 === 503 // true

2.如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。
eg:	Number('0b111')  // 7
	Number('0o10')  // 8

(2)Number.isFinite(),Number.isNaN()
ES6 在Number对象上，新提供了Number.isFinite()和Number.isNaN()两个方法。
1.Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。
eg:	Number.isFinite(15); // true
	Number.isFinite(0.8); // true
	Number.isFinite(NaN); // false
	Number.isFinite(Infinity); // false
	Number.isFinite(-Infinity); // false
	Number.isFinite('foo'); // false
	Number.isFinite('15'); // false
	Number.isFinite(true); // false

2.Number.isNaN()用来检查一个值是否为NaN。
eg:	Number.isNaN(NaN) // true
	Number.isNaN(15) // false
	Number.isNaN('15') // false
	Number.isNaN(true) // false
	Number.isNaN(9/NaN) // true
	Number.isNaN('true' / 0) // true
	Number.isNaN('true' / 'true') // true

3.它们与传统的全局方法isFinite()和isNaN()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效。

(3)Number.parseInt(),Number.parseFloat()
ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。
eg:	// ES5的写法
	parseInt('12.34') // 12
	parseFloat('123.45#') // 123.45

	// ES6的写法
	Number.parseInt('12.34') // 12
	Number.parseFloat('123.45#') // 123.4

(4)Number.isInteger()
Number.isInteger()用来判断一个数值是否为整数。
eg:	Number.isInteger(25) // true
	Number.isInteger(25.1) // false

(5)Number.EPSILON
ES6 在Number对象上面，新增一个极小的常量Number.EPSILON。根据规格，它表示 1 与大于 1 的最小浮点数之间的差。
eg:	Number.EPSILON === Math.pow(2, -52)
	// true
	Number.EPSILON
	// 2.220446049250313e-16
	Number.EPSILON.toFixed(20)
	// "0.00000000000000022204"

(6)安全整数和Number.isSafeInteger()
Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内。
eg:	Number.isSafeInteger('a') // false
	Number.isSafeInteger(null) // false
	Number.isSafeInteger(NaN) // false
	Number.isSafeInteger(Infinity) // false
	Number.isSafeInteger(-Infinity) // false

	Number.isSafeInteger(3) // true
	Number.isSafeInteger(1.2) // false
	Number.isSafeInteger(9007199254740990) // true
	Number.isSafeInteger(9007199254740992) // false

	Number.isSafeInteger(Number.MIN_SAFE_INTEGER - 1) // false
	Number.isSafeInteger(Number.MIN_SAFE_INTEGER) // true
	Number.isSafeInteger(Number.MAX_SAFE_INTEGER) // true
	Number.isSafeInteger(Number.MAX_SAFE_INTEGER + 1) // false

(7)Math对象的扩展
1.Math.trunc():Math.trunc方法用于去除一个数的小数部分，返回整数部分。对于非数值，Math.trunc内部使用Number方法将其先转为数值。对于空值和无法截取整数的值，返回NaN。
eg:	Math.trunc(4.1) // 4
	Math.trunc(4.9) // 4

	Math.trunc('123.456') // 123
	Math.trunc(true) //1
	Math.trunc(false) // 0

	Math.trunc(NaN);      // NaN
	Math.trunc('foo');    // NaN

2.Math.sign():Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。它会返回五种值。
--参数为正数，返回+1；
--参数为负数，返回-1；
--参数为 0，返回0；
--参数为-0，返回-0;
--其他值，返回NaN。

3.Math.clz32():JavaScript 的整数使用 32 位二进制形式表示，Math.clz32方法返回一个数的 32 位无符号整数形式有多少个前导 0。
eg:	Math.clz32(0) // 32
	Math.clz32(1) // 31
	Math.clz32(1000) // 22
	Math.clz32(0b01000000000000000000000000000000) // 1
	Math.clz32(0b00100000000000000000000000000000) // 2

4.Math.imul():Math.imul方法返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数。
eg:	Math.imul(2, 4)   // 8
	Math.imul(-1, 8)  // -8
	Math.imul(-2, -2) // 4

5.Math.fround():Math.fround方法返回一个数的32位单精度浮点数形式。
eg:	Math.fround(0)   // 0
	Math.fround(1)   // 1
	Math.fround(2 ** 24 - 1)   // 16777215

6.Math.hypot():Math.hypot方法返回所有参数的平方和的平方根。
eg:	Math.hypot(3, 4);        // 5
	Math.hypot(3, 4, 5);     // 7.0710678118654755
	Math.hypot();            // 0

7.对数方法
a.Math.expm1():Math.expm1(x)返回 ex - 1，即Math.exp(x) - 1。
eg:	Math.expm1(-1) // -0.6321205588285577
	Math.expm1(0)  // 0
	Math.expm1(1)  // 1.718281828459045
b.Math.log1p():Math.log1p(x)方法返回1 + x的自然对数，即Math.log(1 + x)。如果x小于-1，返回NaN。
eg:	Math.log1p(1)  // 0.6931471805599453
	Math.log1p(0)  // 0
	Math.log1p(-1) // -Infinity
	Math.log1p(-2) // NaN
c.Math.log10():Math.log10(x)返回以 10 为底的x的对数。如果x小于 0，则返回 NaN。
d.Math.log2():Math.log2(x)返回以 2 为底的x的对数。如果x小于 0，则返回 NaN。

8.双曲函数方法
Math.sinh(x) 返回x的双曲正弦（hyperbolic sine）
Math.cosh(x) 返回x的双曲余弦（hyperbolic cosine）
Math.tanh(x) 返回x的双曲正切（hyperbolic tangent）
Math.asinh(x) 返回x的反双曲正弦（inverse hyperbolic sine）
Math.acosh(x) 返回x的反双曲余弦（inverse hyperbolic cosine）
Math.atanh(x) 返回x的反双曲正切（inverse hyperbolic tangent）

(8)指数运算符
1.ES2016 新增了一个指数运算符（**）。指数运算符可以与等号结合，形成一个新的赋值运算符（**=）。
eg:	2 ** 2 // 4
	2 ** 3 // 8
	
	let a = 1.5;
	a **= 2;
	// 等同于 a = a * a;

	let b = 4;
	b **= 3;
	// 等同于 b = b * b * b;
