十三.Reflect
(一)概述
Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个。

1.将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上。现阶段，某些方法同时在Object和Reflect对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。

2.修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。
eg:	// 老写法
	try {
	  Object.defineProperty(target, property, attributes);
	  // success
	} catch (e) {
	  // failure
	}

	// 新写法
	if (Reflect.defineProperty(target, property, attributes)) {
	  // success
	} else {
	  // failure
	}
3.让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。
eg:	// 老写法
	'assign' in Object // true

	// 新写法
	Reflect.has(Object, 'assign') // true
4.Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为。
eg:	Proxy(target, {
	  set: function(target, name, value, receiver) {
	    var success = Reflect.set(target,name, value, receiver);
	    if (success) {
	      log('property ' + name + ' on ' + target + ' set to ' + value);
	    }
	    return success;
	  }
	});

(2)静态方法
Reflect对象一共有 13 个静态方法。

-Reflect.apply(target, thisArg, args)
-Reflect.construct(target, args)
-Reflect.get(target, name, receiver)
-Reflect.set(target, name, value, receiver)
-Reflect.defineProperty(target, name, desc)
-Reflect.deleteProperty(target, name)
-Reflect.has(target, name)
-Reflect.ownKeys(target)
-Reflect.isExtensible(target)
-Reflect.preventExtensions(target)
-Reflect.getOwnPropertyDescriptor(target, name)
-Reflect.getPrototypeOf(target)
-Reflect.setPrototypeOf(target, prototype)

1.Reflect.get(target,name,receiver)
Reflect.get方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。
eg:	var myObject = {
	  foo: 1,
	  bar: 2,
	  get baz() {
	    return this.foo + this.bar;
	  },
	}

	Reflect.get(myObject, 'foo') // 1
	Reflect.get(myObject, 'bar') // 2
	Reflect.get(myObject, 'baz') // 3
2.Reflect.set
a.Reflect.set方法设置target对象的name属性等于value。
eg:	var myObject = {
	  foo: 1,
	  set bar(value) {
	    return this.foo = value;
	  },
	}

	myObject.foo // 1

	Reflect.set(myObject, 'foo', 2);
	myObject.foo // 2

	Reflect.set(myObject, 'bar', 3)
	myObject.foo // 3
b.如果name属性设置了赋值函数，则赋值函数的this绑定receiver。
eg:	var myObject = {
	  foo: 4,
	  set bar(value) {
	    return this.foo = value;
	  },
	};

	var myReceiverObject = {
	  foo: 0,
	};

	Reflect.set(myObject, 'bar', 1, myReceiverObject);
	myObject.foo // 4
	myReceiverObject.foo // 1
c.如果 Proxy 对象和 Reflect 对象联合使用，前者拦截赋值操作，后者完成赋值的默认行为，而且传入了receiver，那么Reflect.set会触发Proxy.defineProperty拦截。
eg:	let p = {
	  a: 'a'
	};

	let handler = {
	  set(target, key, value, receiver) {
	    console.log('set');
	    Reflect.set(target, key, value, receiver)
	  },
	  defineProperty(target, key, attribute) {
	    console.log('defineProperty');
	    Reflect.defineProperty(target, key, attribute);
	  }
	};

	let obj = new Proxy(p, handler);
	obj.a = 'A';
	// set
	// defineProperty
d.如果第一个参数不是对象，Reflect.set会报错。
eg:	Reflect.set(1, 'foo', {}) // 报错
	Reflect.set(false, 'foo', {}) // 

3.Reflect.has
Reflect.has方法对应name in obj里面的in运算符。
eg:	var myObject = {
	  foo: 1,
	};

	// 旧写法
	'foo' in myObject // true

	// 新写法
	Reflect.has(myObject, 'foo') // true

4.Reflect.getPrototypeOf(obj)
Reflect.getPrototypeOf方法用于读取对象的__proto__属性，对应Object.getPrototypeOf(obj)。
eg:	const myObj = new FancyThing();

	// 旧写法
	Object.getPrototypeOf(myObj) === FancyThing.prototype;

	// 新写法
	Reflect.getPrototypeOf(myObj) === FancyThing.prototype;
5.Reflect.setPrototypeOf(obj,newProto)
a.Reflect.setPrototypeOf方法用于设置目标对象的原型（prototype），对应Object.setPrototypeOf(obj, newProto)方法。它返回一个布尔值，表示是否设置成功。
eg:	const myObj = {};

	// 旧写法
	Object.setPrototypeOf(myObj, Array.prototype);

	// 新写法
	Reflect.setPrototypeOf(myObj, Array.prototype);

	myObj.length // 0
b.如果无法设置目标对象的原型（比如，目标对象禁止扩展），Reflect.setPrototypeOf方法返回false。
eg:	Reflect.setPrototypeOf({}, null)
	// true
	Reflect.setPrototypeOf(Object.freeze({}), null)
	// false
c.如果第一个参数不是对象，Object.setPrototypeOf会返回第一个参数本身，而Reflect.setPrototypeOf会报错。
eg:	Object.setPrototypeOf(1, {})
	// 1

	Reflect.setPrototypeOf(1, {})
	// TypeError: Reflect.setPrototypeOf called on non-object
d.如果第一个参数是undefined或null，Object.setPrototypeOf和Reflect.setPrototypeOf都会报错。
eg:	Object.setPrototypeOf(null, {})
	// TypeError: Object.setPrototypeOf called on null or undefined

	Reflect.setPrototypeOf(null, {})
	// TypeError: Reflect.setPrototypeOf called on non-object
6.Reflect.apply(func, thisArg, args)
Reflect.apply方法等同于Function.prototype.apply.call(func, thisArg, args)，用于绑定this对象后执行给定函数。
eg:	const ages = [11, 33, 12, 54, 18, 96];

	// 旧写法
	const youngest = Math.min.apply(Math, ages);
	const oldest = Math.max.apply(Math, ages);
	const type = Object.prototype.toString.call(youngest);

	// 新写法
	const youngest = Reflect.apply(Math.min, Math, ages);
	const oldest = Reflect.apply(Math.max, Math, ages);
	const type = Reflect.apply(Object.prototype.toString, youngest, []);
7.Reflect.defineProperty(target, property, attributes)
Reflect.defineProperty方法基本等同于Object.defineProperty，用来为对象定义属性。未来，后者会被逐渐废除，请从现在开始就使用Reflect.defineProperty代替它。
eg:	function MyDate() {
	  /*…*/
	}

	// 旧写法
	Object.defineProperty(MyDate, 'now', {
	  value: () => Date.now()
	});

	// 新写法
	Reflect.defineProperty(MyDate, 'now', {
	  value: () => Date.now()
	});

8.Reflect.getOwnPropertyDescriptor(target, propertyKey)
a.Reflect.getOwnPropertyDescriptor基本等同于Object.getOwnPropertyDescriptor，用于得到指定属性的描述对象，将来会替代掉后者。
eg:	var myObject = {};
	Object.defineProperty(myObject, 'hidden', {
	  value: true,
	  enumerable: false,
	});

	// 旧写法
	var theDescriptor = Object.getOwnPropertyDescriptor(myObject, 'hidden');

	// 新写法
	var theDescriptor = Reflect.getOwnPropertyDescriptor(myObject, 'hidden');
b.Reflect.getOwnPropertyDescriptor和Object.getOwnPropertyDescriptor的一个区别是，如果第一个参数不是对象，Object.getOwnPropertyDescriptor(1, 'foo')不报错，返回undefined，而Reflect.getOwnPropertyDescriptor(1, 'foo')会抛出错误，表示参数非法。

9.Reflect.isExtensible(target)
a.Reflect.isExtensible方法对应Object.isExtensible，返回一个布尔值，表示当前对象是否可扩展。
eg:	const myObject = {};

	// 旧写法
	Object.isExtensible(myObject) // true

	// 新写法
	Reflect.isExtensible(myObject) // true
b.如果参数不是对象，Object.isExtensible会返回false，因为非对象本来就是不可扩展的，而Reflect.isExtensible会报错。
eg:	Object.isExtensible(1) // false
	Reflect.isExtensible(1) // 报错

10.Reflect.preventExtensions(target)
a.Reflect.preventExtensions对应Object.preventExtensions方法，用于让一个对象变为不可扩展。它返回一个布尔值，表示是否操作成功。
eg:	var myObject = {};

	// 旧写法
	Object.preventExtensions(myObject) // Object {}

	// 新写法
	Reflect.preventExtensions(myObject) // true
b.如果参数不是对象，Object.preventExtensions在ES5环境报错，在ES6环境返回传入的参数，而Reflect.preventExtensions会报错。
eg:	// ES5 环境
	Object.preventExtensions(1) // 报错

	// ES6 环境
	Object.preventExtensions(1) // 1

	// 新写法
	Reflect.preventExtensions(1) // 报错

11.Reflect.ownKeys(target)
Reflect.ownKeys方法用于返回对象的所有属性，基本等同于Object.getOwnPropertyNames与Object.getOwnPropertySymbols之和。
eg:	var myObject = {
	  foo: 1,
	  bar: 2,
	  [Symbol.for('baz')]: 3,
	  [Symbol.for('bing')]: 4,
	};

	// 旧写法
	Object.getOwnPropertyNames(myObject)
	// ['foo', 'bar']

	Object.getOwnPropertySymbols(myObject)
	//[Symbol(baz), Symbol(bing)]

	// 新写法
	Reflect.ownKeys(myObject)
	// ['foo', 'bar', Symbol(baz), Symbol(bing)]

(3)实例：使用Proxy实现观察者模式
观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行。
eg:	const person = observable({
	  name: '张三',
	  age: 20
	});

	function print() {
	  console.log(`${person.name}, ${person.age}`)
	}

	observe(print);
	person.name = '李四';
	// 输出
	// 李四, 20

