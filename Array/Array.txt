七.数组的扩展
(1)扩展运算符
1.含义：扩展运算符是三个点(...)。它好比rest参数的逆运算，将一个数组较为用逗号分隔的参数序列。该运算符主要用于函数调用。
eg:	console.log(...[1, 2, 3])
	// 1 2 3

	console.log(1, ...[2, 3, 4], 5)
	// 1 2 3 4 5

	[...document.querySelectorAll('div')]
	// [<div>, <div>, <div>]

2.替代函数的apply方法
由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。
eg:	// ES5 的写法
	function f(x, y, z) {
	  // ...
	}
	var args = [0, 1, 2];
	f.apply(null, args);

	// ES6的写法
	function f(x, y, z) {
	  // ...
	}
	let args = [0, 1, 2];
	f(...args);

3.扩展运算符的运用
a.复制数组
数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。ES5 只能用变通方法来复制数组。
eg:	const a1 = [1, 2];
	const a2 = a1.concat();

	a2[0] = 2;
	a1 // [1, 2]

扩展运算符提供了复制数组的简便写法。
eg:	const a1 = [1, 2];
	// 写法一
	const a2 = [...a1];
	// 写法二
	const [...a2] = a1;
b.合并数组
eg:	const arr1 = ['a', 'b'];
	const arr2 = ['c'];
	const arr3 = ['d', 'e'];

	// ES5 的合并数组
	arr1.concat(arr2, arr3);
	// [ 'a', 'b', 'c', 'd', 'e' ]

	// ES6 的合并数组
	[...arr1, ...arr2, ...arr3]
	// [ 'a', 'b', 'c', 'd', 'e' ]
不过，这两种方法都是浅拷贝，使用的时候需要注意。上面代码中，a3和a4是用两种不同方法合并而成的新数组，但是它们的成员都是对原数组成员的引用，这就是浅拷贝。如果修改了原数组的成员，会同步反映到新数组。
c.与解构赋值结合。如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。
eg:	// ES5
	a = list[0], rest = list.slice(1)
	// ES6
	[a, ...rest] = list

	const [...butLast, last] = [1, 2, 3, 4, 5];
	// 报错

	const [first, ...middle, last] = [1, 2, 3, 4, 5];
	// 报错
d.字符串：扩展运算符还可以将字符串转为真正的数组。
eg:	[...'hello']
	// [ "h", "e", "l", "l", "o" ]
e.实现可Iterator接口的对象
任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组。
eg:	let nodeList = document.querySelectorAll('div');
	let array = [...nodeList];
e.Map和Set结构，Generator函数
扩展运算符内部调用的是数据结构的 Iterator 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符。
eg:	let map = new Map([
	  [1, 'one'],
	  [2, 'two'],
	  [3, 'three'],
	]);

	let arr = [...map.keys()]; // [1, 2, 3]

(2)Array.from()Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。
1.类似数组的对象:所谓类似数组的对象，本质特征只有一点，即必须有length属性。因此，任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。
eg:	let arrayLike = {
	    '0': 'a',
	    '1': 'b',
	    '2': 'c',
	    length: 3
	};

	// ES5的写法
	var arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']

	// ES6的写法
	let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']

2.可遍历（iterable）的对象
eg:	Array.from('hello')
	// ['h', 'e', 'l', 'l', 'o']

	let namesSet = new Set(['a', 'b'])
	Array.from(namesSet) // ['a', 'b']
