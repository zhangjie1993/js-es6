一.变量的解构赋值
(1)数组的结构赋值
1.基本用法
a.ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。
b.ES6允许这样写.按照对象位置，对变量赋值。本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。如果解构不成功变量的值等于undefined。
eg: let [a,b,c] = [1,2,3];
c.不完全解构，即等号左边的模式，只匹配一部分等号右边的数组。依然可以解构成功。
eg：let [x, y] = [1, 2, 3];
	x // 1
	y // 2

	let [a, [b], d] = [1, [2, 3], 4];
	a // 1
	b // 2
	d // 4
d.如果等号右边不是数组，严格来说，不是可遍历的结构。会报错。事实上，只要某个数据结构具有Iterator接口，都可以采用数组形式的解析赋值。
eg: let [foo] = 1;
	let [foo] = false;

2.默认值
a.解析赋值允许指定默认值。
eg:let [foo = true] = [];
	foo //true
注意：ES6内部使用严格相等运算符(===),判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。如果一个数组成员是null,默认值就不会生效，因为null不严格等于undefined。

(2)对象的解构赋值
1.数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。
eg:let { foo, bar } = { foo: "aaa", bar: "bbb" };
	foo // "aaa"
	bar // "bbb"

2.如果变量名与属性名不一致，必须写成下面这样。
eg:let { foo: baz } = { foo: 'aaa', bar: 'bbb' };
	baz // "aaa"

	let obj = { first: 'hello', last: 'world' };
	let { first: f, last: l } = obj;
	f // 'hello'
	l // 'world'

3.对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。
eg:let { foo: baz } = { foo: "aaa", bar: "bbb" };
	baz // "aaa"
	foo // error: foo is not defined

4.与数组一样，解构也可以用于嵌套结构的对象。
eg:let obj = {
	  p: [
	    'Hello',
	    { y: 'World' }
	  ]
	};

	let { p: [x, { y }] } = obj;
	x // "Hello"
	y // "World"
注意:p是模式，不是变量。因此不会别赋值。若被赋值，可写成如下情况：
eg:let obj = {
	  p: [
	    'Hello',
	    { y: 'World' }
	  ]
	};

	let { p, p: [x, { y }] } = obj;
	x // "Hello"
	y // "World"
	p // ["Hello", {y: "World"}]

5.对象的解构也可以指定默认值。默认值生效的条件是，对象的属性值严格等于undefined。
eg:var {x = 3} = {};
	x // 3

	var {x, y = 5} = {x: 1};
	x // 1
	y // 5

	var {x: y = 3} = {};
	y // 3

	var {x: y = 3} = {x: 5};
	y // 5

	var { message: msg = 'Something went wrong' } = {};
	msg // "Something went wrong"

	var {x = 3} = {x: undefined};
	x // 3

	var {x = 3} = {x: null};
	x // null

(3)字符串的解构赋值
1.字符串也可以解构赋值。
eg: const [a,b,c,d,e] = 'hello';         
	a // "h"
	b // "e"                                      
	c // "l"
	d // "l"
	e // "o"

2.类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。
eg:let {length : len} = 'hello';
	len // 5

(4)数值和布尔值的结构赋值
1.解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。
eg:let {toString: s} = 123;
	s === Number.prototype.toString // true

	let {toString: s} = true;
	s === Boolean.prototype.toString // true

2.解构规则是：只要等号右边的值不是对象或数组，就将其转为对象。由于undefined和null无法转为对象，所以对他们进行解构赋值，都会报错。

(5)函数参数的解构赋值
1.函数的参数也可以使用解构赋值。
eg:function add([x, y]){
	  return x + y;
	}

	add([1, 2]); // 3

2.函数参数的解构也可以使用默认值。
eg:function move({x = 0, y = 0} = {}) {
	  return [x, y];
	}

	move({x: 3, y: 8}); // [3, 8]

	move({x: 3}); // [3, 0]
	move({}); // [0, 0]
	move(); // [0, 0]
函数move的参数是一个对象，通过对这个对象进行解构，得到变量x和y的值。如果解构失败，x和y等于默认值。
注意：
eg:function move({x, y} = { x: 0, y: 0 }) {
	  return [x, y];
	}

	move({x: 3, y: 8}); // [3, 8]
	move({x: 3}); // [3, undefined]
	move({}); // [undefined, undefined]
	move(); // [0, 0]
上面代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值，所以会得到与前一种写法不同的结果。

(6)圆括号问题
1.不能把使用圆括号的情况
a.变量声明语句
eg:let [(a)] = [1];
   let {x: (c)} = {};
   let ({x: c}) = {};
   let {(x): c} = {};
   let { o: ({ p: p }) } = { o: { p: 2 } };
都会报错，因为他们都是变量声明语句，模式不能使用圆括号。
b.函数参数
函数参数也属于变量声明，因此不能带圆括号。
eg: function f([(z)]) { return z; } //报错
	function f([z,(x)]) { return x; } //报错
c.赋值语句的模式
eg: ({ p: a }) = { p: 42 };
	([a]) = [5];

2.可以使用圆括号的情况
a.赋值语句的非模式部分，可以使用圆括号。
eg:	[(b)] = [3];
	({ p: (d) }) = {});
	[(parseInt.prop)] = [3];

(7)用途
a.交换变量的值
eg:	let x = 1;
	let y = 2;
	[x, y] = [y, x];
b.从函数返回多个值
eg:
// 返回一个数组
function example() {
  return [1, 2, 3];
}
let [a, b, c] = example();
// 返回一个对象
function example() {
  return {
    foo: 1,
    bar: 2
  };
}
let { foo, bar } = example();
c.函数参数的定义
解构赋值可以方便地将一组参数与变量名对应起来。
eg:
	// 参数是一组有次序的值
	function f([x, y, z]) { ... }
	f([1, 2, 3]);

	// 参数是一组无次序的值
	function f({x, y, z}) { ... }
	f({z: 3, y: 2, x: 1});
d.提取JSON数据
解构赋值对提取JSON对象中的数据，尤其有用。
eg:let jsonData = {
	  id: 42,
	  status: "OK",
	  data: [867, 5309]
	};

	let { id, status, data: number } = jsonData;

	console.log(id, status, number);
	// 42, "OK", [867, 5309]
e.函数参数的默认值
eg:	jQuery.ajax = function (url, {
		async = true,
		beforeSend = function () {},
		cache = true,
		complete = function () {},
		crossDomain = false,
		global = true,
		// ... more config
	} = {}) {
		// ... do stuff
	};
f.遍历Map结构
eg:	const map = new Map();
	map.set('first', 'hello');
	map.set('second', 'world');

	for (let [key, value] of map) {
	  console.log(key + " is " + value);
	}
	// first is hello
	// second is world
g.输入模块的指定方法
加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。
eg:const { SourceMapConsumer, SourceNode } = require("source-map");