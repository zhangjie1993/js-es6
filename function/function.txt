
六.函数的扩展
(1)函数参数的默认值
1.基本用法:ES6允许为函数的参数设置默认值，即直接写在参数定义的后面。
eg:	function log(x, y = 'World') {
	  console.log(x, y);
	}

	log('Hello') // Hello World
	log('Hello', 'China') // Hello China
	log('Hello', '') // Hello
注意:参数变量是默认声明的，所以不能用let或const再次声明。使用参数默认值时，函数不能有同名参数。参数默认值不是传值的，而是每次都重新计算默认值表达式的值。

2.与解构赋值默认值结合使用
eg:	function foo({x, y = 5}) {
	  console.log(x, y);
	}

	foo({}) // undefined 5
	foo({x: 1}) // 1 5
	foo({x: 1, y: 2}) // 1 2
	foo() // TypeError: Cannot read property 'x' of undefined
注意:通过提供函数参数的默认值，就可以避免这种情况。
eg:	function foo({x, y = 5} = {}) {
	  console.log(x, y);
	}

	foo() // undefined 5

3.参数默认值的位置:通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。
eg:	// 例一
	function f(x = 1, y) {
	  return [x, y];
	}

	f() // [1, undefined]
	f(2) // [2, undefined])
	f(, 1) // 报错
	f(undefined, 1) // [1, 1]

	// 例二
	function f(x, y = 5, z) {
	  return [x, y, z];
	}

	f() // [undefined, 5, undefined]
	f(1) // [1, 5, undefined]
	f(1, ,2) // 报错
	f(1, undefined, 2) // [1, 5, 2]

4.函数的length属性
a.指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。length属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。
eg:	(function (a) {}).length // 1
	(function (a = 5) {}).length // 0
	(function (a, b, c = 5) {}).length // 2
	(function (a = 0, b, c) {}).length // 0
	(function (a, b = 1, c) {}).length // 1

5.作用域
一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。
eg:	var x = 1;

	function f(x, y = x) {
	  console.log(y);
	}

	f(2) // 2

	let x = 1;

	function f(y = x) {
	  let x = 2;
	  console.log(y);
	}

	f() // 1

6.应用
利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。

(2)rest参数
1.（形式为...变量名）用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。
eg:	function add(...values) {
	  let sum = 0;

	  for (var val of values) {
	    sum += val;
	  }

	  return sum;
	}

	add(2, 5, 3) // 10
2.rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。
eg:	// 报错
	function f(a, ...b, c) {
	  // ...
	}

3.函数的length属性，不包括 rest 参数。
eg:	(function(a) {}).length  // 1
	(function(...a) {}).length  // 0
	(function(a, ...b) {}).length  // 1

(3)严格模式
1.ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。
eg:	// 报错
	function doSomething(a, b = a) {
	  'use strict';
	  // code
	}

	// 报错
	const doSomething = function ({a, b}) {
	  'use strict';
	  // code
	};

	// 报错
	const doSomething = (...a) => {
	  'use strict';
	  // code
	};

	const obj = {
	  // 报错
	  doSomething({a, b}) {
	    'use strict';
	    // code
	  }
	};
2.两种方法可以规避这种限制。
a.第一种是设定全局性的严格模式，这是合法的。
eg:	'use strict';
	function doSomething(a, b = a) {
	  // code
	}
b.第二种是把函数包在一个无参数的立即执行函数里面。
eg:	const doSomething = (function () {
	  'use strict';
	  return function(value = 42) {
	    return value;
	  };
	}());

(4)name属性
函数的name属性，返回该函数的函数名。
eg:	function foo() {}
	foo.name // "foo"
a.如果将一个匿名函数赋值给一个变量，ES5的name属性，会返回空字符串，而ES6的name属性会返回实际的函数名。
eg:	var f = function () {};

	// ES5
	f.name // ""

	// ES6
	f.name // "f"
b.如果将一个具名函数赋值给一个变量，则 ES5 和 ES6 的name属性都返回这个具名函数原本的名字。
eg:	const bar = function baz() {};

	// ES5
	bar.name // "baz"

	// ES6
	bar.name // "baz"
c.Function构造函数返回的函数实例，name属性的值为anonymous。
eg:	(new Function).name // "anonymous"
d.bind返回的函数，name属性值会加上bound前缀。
eg:	function foo() {};
	foo.bind({}).name // "bound foo"

	(function(){}).bind({}).name // "bound"

(5)箭头函数
1.基本用法
a.ES6运行使用“箭头”(=>)定义函数。
eg:	var f = v => v;

	// 等同于
	var f = function (v) {
	  return v;
	};
b.如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。
eg:	var f = () => 5;
	// 等同于
	var f = function () { return 5 };

	var sum = (num1, num2) => num1 + num2;
	// 等同于
	var sum = function(num1, num2) {
	  return num1 + num2;
	};
c.如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。
eg:	var sum = (num1, num2) => { return num1 + num2; }
由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。
eg:	// 报错
	let getTempItem = id => { id: id, name: "Temp" };

	// 不报错
	let getTempItem = id => ({ id: id, name: "Temp" });
如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。
eg:	let fn = () => void doesNotReturn();

2.使用注意点
a.函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
b.不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。
c.不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。
d.不可以使用yield命令，因此箭头函数不能用作 Generator 函数。
eg:	// ES6
	function foo() {
	  setTimeout(() => {
	    console.log('id:', this.id);
	  }, 100);
	}

	// ES5
	function foo() {
	  var _this = this;

	  setTimeout(function () {
	    console.log('id:', _this.id);
	  }, 100);
	}

3.嵌套的箭头函数
eg:	// ES6
	function foo() {
	  setTimeout(() => {
	    console.log('id:', this.id);
	  }, 100);
	}

	// ES5
	function foo() {
	  var _this = this;
	  setTimeout(function () {
	    console.log('id:', _this.id);
	  }, 100);
	}

(6)双冒号运算符
“函数绑定”（function bind）运算符，用来取代call、apply、bind调用。函数绑定运算符是并排的两个冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。
eg:	foo::bar;
	// 等同于
	bar.bind(foo);

	foo::bar(...arguments);
	// 等同于
	bar.apply(foo, arguments);

	const hasOwnProperty = Object.prototype.hasOwnProperty;
	function hasOwn(obj, key) {
	  return obj::hasOwnProperty(key);
	}
☆如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。
eg:	var method = obj::obj.foo;
	// 等同于
	var method = ::obj.foo;

	let log = ::console.log;
	// 等同于
	var log = console.log.bind(console);

(7)尾调用优化
1.尾调用:某个函数的最后一步是调用另一个函数。
eg:	function f(x){
  		return g(x);
	}

2.尾调用优化:只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。
eg:	function f() {
	  let m = 1;
	  let n = 2;
	  return g(m + n);
	}
	f();

	// 等同于
	function f() {
	  return g(3);
	}
	f();

	// 等同于
	g(3);
注意:只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。
eg:	function addOne(a){
	  var one = 1;
	  function inner(b){
	    return b + one;7
	  }
	  return inner(a);
	}

3.尾递归:函数调用自身，称为递归。如果尾调用自身，就称为尾递归。递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。
eg:	//递归
	function factorial(n) {
	  if (n === 1) return 1;
	  return n * factorial(n - 1);
	}

	factorial(5) // 120

	//尾递归
	function factorial(n, total) {
	  if (n === 1) return total;
	  return factorial(n - 1, n * total);
	}

	factorial(5, 1) // 120

4.递归函数的改写
尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。这样做的缺点就是不太直观，第一眼很难看出来。
a.方法一是在尾递归函数之外，再提供一个正常形式的函数。
eg:	function tailFactorial(n, total) {
	  if (n === 1) return total;
	  return tailFactorial(n - 1, n * total);
	}

	function factorial(n) {
	  return tailFactorial(n, 1);
	}

	factorial(5) // 120
b.采用 ES6 的函数默认值。
eg:	function factorial(n, total = 1) {
	  if (n === 1) return total;
	  return factorial(n - 1, n * total);
	}

	factorial(5) // 120

5.严格模式
ES的尾调用优化只在严格模式下开启，正常模式是无效的。原因是在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。
func.arguments：返回调用时函数的参数。
func.caller：返回调用当前函数的那个函数。
尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效

6.尾递归优化的实现
蹦床函数（trampoline）可以将递归执行转为循环执行。
eg:	function trampoline(f) {
	  while (f && f instanceof Function) {
	    f = f();
	  }
	  return f;
	}
注意:这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。

(8)函数参数的尾逗号
ES2017允许函数的最后一个参数有尾逗号
eg：function clownsEverywhere(
	  param1,
	  param2
	) { /* ... */ }

	clownsEverywhere(
	  'foo',
	  'bar'
	);