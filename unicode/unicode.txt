三.字符串的扩展
(1)字符的Unicode表示法
1.JavaScript 允许采用\uxxxx形式表示一个字符，其中xxxx表示字符的 Unicode 码点。这种表示法只限于码点在\u0000~\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。
eg:	"\u0061"
	// "a"

eg:	"\uD842\uDFB7"
	// "𠮷"

	"\u20BB7"
	// " 7"
2.ES6只要将码点放入大括号，就能正确的解读字符。
eg:	"\u{20BB7}"
	// "𠮷"

	"\u{41}\u{42}\u{43}"
	// "ABC"

	let hello = 123;
	hell\u{6F} // 123

	'\u{1F680}' === '\uD83D\uDE80'
	// true

(2)codePointAt()
1.js中字符以 UTF-16 的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode 码点大于0xFFFF的字符），JavaScript 会认为它们是两个字符。而且charAt方法无法读取整个字符，charCodeAt方法只能分别返回前两个字节和后两个字节的值。
eg:	var s = "𠮷";
	s.length // 2
	s.charAt(0) // ''
	s.charAt(1) // ''
	s.charCodeAt(0) // 55362
	s.charCodeAt(1) // 57271

2.ES6中codePointAt可以处理4个字节存储的字符。返回一个字符的码点。
eg:	let s = '𠮷a';
	s.codePointAt(0) // 134071
	s.codePointAt(1) // 57271

	s.codePointAt(2) // 97
注意：codePointAt返回的是码点的十进制值，用toString可转换其他进制的。

3.codePointAt方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。

(4)字符串的遍历器接口
1.for..of循环遍历字符串。还可以识别大于0xFFFF的码点。

(5)at()
1.at方法可以识别Unicode 编号大于0xFFFF的字符，返回正确的字符。
eg:	'abc'.at(0) // "a"
	'𠮷'.at(0) // "𠮷"

(6)normalize()
1.ES6 提供字符串实例的normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。

(7)includes(),startWith(),endsWith();
1.includes()：返回布尔值，表示是否找到了参数字符串。
startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。
endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。
eg:	let s = 'Hello world!';
	s.startsWith('Hello') // true
	s.endsWith('!') // true
	s.includes('o') // true

2.这三个方法都支持第二个参数，表示开始搜索的位置。
eg:	let s = 'Hello world!';
	s.startsWith('world', 6) // true
	s.endsWith('Hello', 5) // true
	s.includes('Hello', 6) // false
注意：endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。

(8)repeat()
1.repeat方法返回一个新字符串，表示将原字符串重复n次。
eg:	'x'.repeat(3) // "xxx"
	'hello'.repeat(2) // "hellohello"
	'na'.repeat(0) // ""

2.参数如果是小数，会被取整。如果repeat的参数是负数或者Infinity，会报错。参数NaN等同于 0。如果repeat的参数是字符串，则会先转换成数字。

(9)padStart(),padEnd()
1.padStart()用于头部补全，padEnd()用于尾部补全。padStart和padEnd一共接受两个参数，第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。
eg:	'x'.padStart(5, 'ab') // 'ababx'
	'x'.padStart(4, 'ab') // 'abax'

	'x'.padEnd(5, 'ab') // 'xabab'
	'x'.padEnd(4, 'ab') // 'xaba'

2.如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。如果省略第二个参数，默认使用空格补全长度。

3.用途：为数值补全指定位数。提示字符串格式。

(10)matchAll
1.该方法返回一个正则表达式在当前字符串的所有匹配。

(11)
1.传统的js是这样写的:
eg:	$('#result').append(
	  'There are <b>' + basket.count + '</b> ' +
	  'items in your basket, ' +
	  '<em>' + basket.onSale +
	  '</em> are on sale!'
	);

ES6是这样写的：
eg：$('#result').append(`
		There are <b>${basket.count}</b> items
		in your basket, <em>${basket.onSale}</em>
		are on sale!
	`);
模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。

2.如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。可以使用trim方法消除它。模板字符串中嵌入变量，需要将变量名写在${}之中。

3.大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。
eg:	let x = 1;
	let y = 2;

	`${x} + ${y} = ${x + y}`
	// "1 + 2 = 3"

4.模板字符串之中还能调用函数
eg:	function fn() {
	  return "Hello World";
	}

	`foo ${fn()} bar`
	// foo Hello World bar

5.模板字符串还可以嵌套
eg:	const tmpl = addrs => `
	  <table>
	  ${addrs.map(addr => `
	    <tr><td>${addr.first}</td></tr>
	    <tr><td>${addr.last}</td></tr>
	  `).join('')}
	  </table>
	`;
☆(12)实例：模板编译
1.使用<%=...%>输出js表达式
eg:	let template = `
	<ul>
	  <% for(let i=0; i < data.supplies.length; i++) { %>
	    <li><%= data.supplies[i] %></li>
	  <% } %>
	</ul>
	`;
(13)标签模板
1.标签模板：模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。但是，如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。
eg:	let a = 5;
	let b = 10;

	tag`Hello ${ a + b } world ${ a * b }`;
	// 等同于
	tag(['Hello ', ' world ', ''], 15, 50);

2."标签模板"的一个重要应用就是过滤HTML字符串，防止用户输入的恶意内容。
eg:	let message =
	SaferHTML`<p>${sender} has sent you a message.</p>`;

	function SaferHTML(templateData) {
	  	let s = templateData[0];
	  	for (let i = 1; i < arguments.length; i++) {
	    	let arg = String(arguments[i]);

	    	// Escape special characters in the substitution.
	   		s += arg.replace(/&/g, "&amp;")
	            .replace(/</g, "&lt;")
	            .replace(/>/g, "&gt;");

	    	// Don't escape special characters in the template.
		    s += templateData[i];
  		}
  		return s;
	}

	let sender = '<script>alert("abc")</script>'; // 恶意代码
	let message = SaferHTML`<p>${sender} has sent you a message.</p>`;

	message
	// <p>&lt;script&gt;alert("abc")&lt;/script&gt; has sent you a message.</p>

3.标签模板的另一个应用，就是多语言转换（国际化处理）。
eg:	i18n`Welcome to ${siteName}, you are visitor number ${visitorNumber}!`
	// "欢迎访问xxx，您是第xxxx位访问者！"

(14)String.raw()
1.String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。
eg:	String.raw`Hi\n${2+3}!`;
	// 返回 "Hi\\n5!"

	String.raw`Hi\u000A!`;
	// 返回 "Hi\\u000A!"

(15)模板字符串的限制