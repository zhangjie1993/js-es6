四.正则的扩展
(1)RegExp构造函数
1.在ES5中,RegExp构造函数的参数有两种情况
a.参数是字符串，第二个参数表示正则表达式的修饰符
eg:	var regex = new RegExp('xyz', 'i');
	// 等价于
	var regex = /xyz/i;
b.参数是一个表达式，这时会返回一个原有正则表达式的拷贝。
eg:	var regex = new RegExp(/xyz/i);
	// 等价于
	var regex = /xyz/i;
注意：第二个参数不能添加修饰符，否则报错。

2.ES6中如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。
eg:	new RegExp(/abc/ig, 'i').flags
	// "i"

(2)字符串的正则方法
1.ES6中将字符串对象的4个方法--match(),replace(),search(),split()与正则相关的方法全部放在RegExp对象上。
- String.prototype.match 调用 RegExp.prototype[Symbol.match]
- String.prototype.replace 调用 RegExp.prototype[Symbol.replace]
- String.prototype.search 调用 RegExp.prototype[Symbol.search]
- String.prototype.split 调用 RegExp.prototype[Symbol.split]

(3)u修饰符
1.ES6对正则表达式添加了u修饰符，含义为“Unicode模式”，用来正确处理大于\uFFFF的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。
a.点字符:点（.）字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于0xFFFF的 Unicode 字符，点字符不能识别，必须加上u修饰符。
eg:	var s = '𠮷';

	/^.$/.test(s) // false
	/^.$/u.test(s) // true
b.Unicode字符表示法：ES6 新增了使用大括号表示Unicode字符，这种表示法在正则表达式中必须加上u修饰符，才能识别当中的大括号，否则会被解读为量词。
eg:	/\u{61}/.test('a') // false
	/\u{61}/u.test('a') // true
	/\u{20BB7}/u.test('𠮷') // true
c.量词:使用u修饰符后，所有量词都会正确识别码点大于0xFFFF的 Unicode 字符。
eg:	/a{2}/.test('aa') // true
	/a{2}/u.test('aa') // true
	/𠮷{2}/.test('𠮷𠮷') // false
	/𠮷{2}/u.test('𠮷𠮷') // true
d.预定义模式:u修饰符也影响到预定义模式，能否正确识别码点大于0xFFFF的 Unicode 字符。
eg:	/^\S$/.test('𠮷') // false
	/^\S$/u.test('𠮷') // true
e.i修饰符：有些 Unicode 字符的编码不同，但是字型很相近，比如，\u004B与\u212A都是大写的K。
eg:	/[a-z]/i.test('\u212A') // false
	/[a-z]/iu.test('\u212A') // true
上面代码中，不加u修饰符，就无法识别非规范的K字符。

(4)RegExp.prototype.unicode
1.正则实例对象新增unicode属性，表示是否设置了u修饰符。
eg:	const r1 = /hello/;
	const r2 = /hello/u;

	r1.unicode // false
	r2.unicode // true

(5)y修饰符
1.y修饰符，叫做“粘连”修饰符。y修饰符的作用与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。
eg：var s = 'aaa_aa_a';
	var r1 = /a+/g;
	var r2 = /a+/y;

	r1.exec(s) // ["aaa"]
	r2.exec(s) // ["aaa"]

	r1.exec(s) // ["aa"]
	r2.exec(s) // null

(6)RegExp.prototype.sticky属性
1.与y修饰符相匹配，ES6 的正则实例对象多了sticky属性，表示是否设置了y修饰符。
eg:	var r = /hello\d/y;
	r.sticky // true

(7)RegExp.prototype.flags属性
1.ES6 为正则表达式新增了flags属性，会返回正则表达式的修饰符。
eg:	// ES5 的 source 属性
	// 返回正则表达式的正文
	/abc/ig.source
	// "abc"

	// ES6 的 flags 属性
	// 返回正则表达式的修饰符
	/abc/ig.flags
	// 'gi'

(8)s修饰符:dotAll模式
1.ES2018 引入s修饰符，使得.可以匹配任意单个字符。这是dotAll模式，代表一切字符。
eg:	const re = /foo.bar/s;
	// 另一种写法
	// const re = new RegExp('foo.bar', 's');

	re.test('foo\nbar') // true
	re.dotAll // true
	re.flags // 's'

(9)后行断言
1.先行断言“指的是，x只有在y前面才匹配，必须写成/x(?=y)/。比如，只匹配百分号之前的数字，要写成/\d+(?=%)/。”先行否定断言“指的是，x只有不在y前面才匹配，必须写成/x(?!y)/。比如，只匹配不在百分号之前的数字，要写成/\d+(?!%)/。

2.“后行断言”正好与“先行断言”相反，x只有在y后面才匹配，必须写成/(?<=y)x/。比如，只匹配美元符号之后的数字，要写成/(?<=\$)\d+/。”后行否定断言“则与”先行否定断言“相反，x只有不在y后面才匹配，必须写成/(?<!y)x/。比如，只匹配不在美元符号后面的数字，要写成/(?<!\$)\d+/。

(10)Unicode属性类
1.ES2018引入了一种新的类的写法\p{...}和\P{...}，允许正则表达式匹配符合Unicode某种属性的所有字符。
eg:	const regexGreekSymbol = /\p{Script=Greek}/u;
	regexGreekSymbol.test('π') // true

(11)具名组匹配
1.简介
正则表达式使用圆括号进行组匹配。但是如果租的顺序变了，引用的时候就必须修改序号。ES2018 引入了具名组匹配（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。
eg:	js正则
	const RE_DATE = /(\d{4})-(\d{2})-(\d{2})/;

	const matchObj = RE_DATE.exec('1999-12-31');
	const year = matchObj[1]; // 1999
	const month = matchObj[2]; // 12
	const day = matchObj[3]; // 31

	ES6正则
	const RE_DATE = /(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/;

	const matchObj = RE_DATE.exec('1999-12-31');
	const year = matchObj.groups.year; // 1999
	const month = matchObj.groups.month; // 12
	const day = matchObj.groups.day; // 31

2.解构赋值和替换
有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。字符串替换时，使用$<组名>引用具名组。
eg:	let re = /(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/u;

	'2015-01-02'.replace(re, '$<day>/$<month>/$<year>')
	// '02/01/2015'

3.引用
如果要在正则表达式内部引用某个“具名组匹配”，可以使用\k<组名>的写法。
eg:	const RE_TWICE = /^(?<word>[a-z]+)!\k<word>$/;
	RE_TWICE.test('abc!abc') // true
	RE_TWICE.test('abc!ab') // false

(12)String.prototype.matchAll
String.prototype.matchAll方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组。
eg:	const string = 'test1test2test3';

	// g 修饰符加不加都可以
	const regex = /t(e)(st(\d?))/g;

	for (const match of string.matchAll(regex)) {
	  console.log(match);
	}
	// ["test1", "e", "st1", "1", index: 0, input: "test1test2test3"]
	// ["test2", "e", "st2", "2", index: 5, input: "test1test2test3"]
	// ["test3", "e", "st3", "3", index: 10, input: "test1test2test3"]