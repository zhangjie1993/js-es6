十一.Set和Map数据结构
(1)Set
1.基本用法
a.ES6 提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。
b.Set函数可以接受一个数组（或者具有iterable接口的其他数据结构）作为参数，用来初始化。
eg:	// 例一
	const set = new Set([1, 2, 3, 4, 4]);
	[...set]
	// [1, 2, 3, 4]

	// 例二
	const items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);
	items.size // 5

	// 例三
	const set = new Set(document.querySelectorAll('div'));
	set.size // 56

	// 类似于
	const set = new Set();
	document
	 .querySelectorAll('div')
	 .forEach(div => set.add(div));
	set.size // 56
c.向 Set 加入值的时候，不会发生类型转换，所以5和"5"是两个不同的值。Set内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（===），主要的区别是NaN等于自身，而精确相等运算符认为NaN不等于自身。另外，Set实例两个对象总是不相等的。
eg:	let set = new Set();
	let a = NaN;
	let b = NaN;
	set.add(a);
	set.add(b);
	set // Set {NaN}

2.Set实例的属性和方法
a.Set 结构的实例有以下属性。
-Set.prototype.constructor：构造函数，默认就是Set函数。
-Set.prototype.size：返回Set实例的成员总数。
b.Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。
-add(value)：添加某个值，返回 Set 结构本身。
-delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
-has(value)：返回一个布尔值，表示该值是否为Set的成员。
-clear()：清除所有成员，没有返回值。
eg:	s.add(1).add(2).add(2);
	// 注意2被加入了两次

	s.size // 2

	s.has(1) // true
	s.has(2) // true
	s.has(3) // false

	s.delete(2);
	s.has(2) // false
d.Array.from方法可以将Set结构转为数组
eg:	const items = new Set([1, 2, 3, 4, 5]);
	const array = Array.from(items);

3.遍历操作
a.Set结构的实例有四个遍历方法，可以用于遍历成员。
-keys()：返回键名的遍历器
-values()：返回键值的遍历器
-entries()：返回键值对的遍历器
-forEach()：使用回调函数遍历每个成员
①keys(),values(),entries()
keys方法、values方法、entries方法返回的都是遍历器对象。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。这意味着，可以省略values方法，直接用for...of循环遍历 Set。
eg:	let set = new Set(['red', 'green', 'blue']);

	for (let item of set.keys()) {
	  console.log(item);
	}
	// red
	// green
	// blue

	for (let item of set.values()) {
	  console.log(item);
	}
	// red
	// green
	// blue

	for (let item of set.entries()) {
	  console.log(item);
	}
	// ["red", "red"]
	// ["green", "green"]
	// ["blue", "blue"]
②forEach()
Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。forEach方法的参数就是一个处理函数。该函数的参数与数组的forEach一致，依次为键值、键名、集合本身（例子省略了该参数）。这里需要注意，Set结构的键名就是键值（两者是同一个值），因此第一个参数与第二个参数的值永远都是一样的。另外，forEach方法还可以有第二个参数，表示绑定处理函数内部的this对象。
eg:	set = new Set([1, 4, 9]);
	set.forEach((value, key) => console.log(key + ' : ' + value))
	// 1 : 1
	// 4 : 4
	// 9 : 9
③遍历的应用
扩展运算符（...）内部使用for...of循环，所以也可以用于 Set 结构。
eg:	let set = new Set(['red', 'green', 'blue']);
	let arr = [...set];
	// ['red', 'green', 'blue']
数组的map和filter方法也可以间接用于 Set 了。
eg:	let set = new Set([1, 2, 3]);
	set = new Set([...set].map(x => x * 2));
	// 返回Set结构：{2, 4, 6}

	let set = new Set([1, 2, 3, 4, 5]);
	set = new Set([...set].filter(x => (x % 2) == 0));
	// 返回Set结构：{2, 4}

(2)WeakSet
1.含义
WeakSet结构与Set类似，也是不重复的值的集合。但是，它与Set有两个区别。首先，WeakSet 的成员只能是对象，而不能是其他类型的值。其次，WeakSet中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。
eg:	const ws = new WeakSet();
	ws.add(1)
	// TypeError: Invalid value used in weak set
	ws.add(Symbol())
	// TypeError: invalid value used in weak set

2.语法
a.WeakSet 是一个构造函数，可以使用new命令，创建 WeakSet 数据结构。作为构造函数，WeakSet 可以接受一个数组或类似数组的对象作为参数。（实际上，任何具有 Iterable 接口的对象，都可以作为 WeakSet 的参数。）该数组的所有成员，都会自动成为 WeakSet 实例对象的成员。
eg:	const a = [[1, 2], [3, 4]];
	const ws = new WeakSet(a);
	// WeakSet {[1, 2], [3, 4]}

b.WeakSet 结构有以下三个方法。
-WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员。
-WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。
-WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。
eg:	const ws = new WeakSet();
	const obj = {};
	const foo = {};

	ws.add(window);
	ws.add(obj);

	ws.has(window); // true
	ws.has(foo);    // false

	ws.delete(window);
	ws.has(window);    // false
①WeakSet 没有size属性，没有办法遍历它的成员。
eg:	ws.size // undefined
②WeakSet 不能遍历，是因为成员都是弱引用，随时可能消失，遍历机制无法保证成员的存在，很可能刚刚遍历结束，成员就取不到了。WeakSet的一个用处，是储存DOM节点，而不用担心这些节点从文档移除时，会引发内存泄漏。
eg:	ws.forEach // undefined

(3)Map
1.含义和基本用法
a.JavaScript 的对象（Object），本质上是键值对的集合（Hash结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。
eg:	const m = new Map();
	const o = {p: 'Hello World'};

	m.set(o, 'content')
	m.get(o) // "content"

	m.has(o) // true
	m.delete(o) // true
	m.has(o) // false
b.任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构（详见《Iterator》一章）都可以当作Map构造函数的参数。
eg:	//Map构造函数接受数组作为参数
	const items = [
	  ['name', '张三'],
	  ['title', 'Author']
	];

	const map = new Map();

	items.forEach(
	  ([key, value]) => map.set(key, value)
	);
	//Set 对象和 Map 对象，当作Map构造函数的参数。
	eg:	const set = new Set([
		  ['foo', 1],
		  ['bar', 2]
		]);
		const m1 = new Map(set);
		m1.get('foo') // 1

		const m2 = new Map([['baz', 3]]);
		const m3 = new Map(m2);
		m3.get('baz') // 3
c.如果对同一个键多次赋值，后面的值将覆盖前面的值。如果读取一个未知的键，则返回undefined。
eg:	const map = new Map();

map.set(1, 'aaa').set(1, 'bbb');

map.get(1) // "bbb"

new Map().get('asfddfsasadf')
// undefined
注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。
const map = new Map();

map.set(['a'], 555);
map.get(['a']) // undefined
上面代码的set和get方法，表面是针对同一个键，但实际上这是两个值，内存地址是不一样的，因此get方法无法读取该键，返回undefined。
d.由上可知，Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。

如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如0和-0就是一个键，布尔值true和字符串true则是两个不同的键。另外，undefined和null也是两个不同的键。虽然NaN不严格相等于自身，但 Map 将其视为同一个键。
eg:	let map = new Map();

	map.set(-0, 123);
	map.get(+0) // 123

	map.set(true, 1);
	map.set('true', 2);
	map.get(true) // 1

	map.set(undefined, 3);
	map.set(null, 4);
	map.get(undefined) // 3

	map.set(NaN, 123);
	map.get(NaN) // 123

2.实例的属性和操作方法
a.size 属性:size属性返回 Map 结构的成员总数。
eg:	const map = new Map();
	map.set('foo', true);
	map.set('bar', false);

	map.size // 2
b.set(key,value)
set方法设置键名key对应的键值为value，然后返回整个Map结构。如果key已经有值，则键值会被更新，否则就新生成该键。set方法返回的是当前的Map对象，因此可以采用链式写法。
eg:	let map = new Map()
  .set(1, 'a')
  .set(2, 'b')
  .set(3, 'c');
c.get(key)
get方法读取key对应的键值，如果找不到key，返回undefined。
eg:	const m = new Map();

	const hello = function() {console.log('hello');};
	m.set(hello, 'Hello ES6!') // 键是函数

	m.get(hello)  // Hello ES6!
d.has(key)
has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。
eg:	const map6 = new Map();
	map6.set(1,'a').set(2,'b').set(3,'c');
	console.log(map6.has(1));
	console.log(map6.has(5));
e.delete(key)
delete方法删除某个键，返回true。如果删除失败，返回false。
f.clear()
clear方法清除所有的成员，没有返回值

3.遍历方法
a.Map 结构原生提供三个遍历器生成函数和一个遍历方法。需要特别注意的是，Map 的遍历顺序就是插入顺序。Map结构的默认遍历器接口（Symbol.iterator属性），就是entries方法。
-keys()：返回键名的遍历器。
-values()：返回键值的遍历器。
-entries()：返回所有成员的遍历器。
-forEach()：遍历 Map 的所有成员。
eg:	const map = new Map([
	  ['F', 'no'],
	  ['T',  'yes'],
	]);

	for (let key of map.keys()) {
	  console.log(key);
	}
	// "F"
	// "T"

	for (let value of map.values()) {
	  console.log(value);
	}
	// "no"
	// "yes"

	for (let item of map.entries()) {
	  console.log(item[0], item[1]);
	}
	// "F" "no"
	// "T" "yes"

	// 或者
	for (let [key, value] of map.entries()) {
	  console.log(key, value);
	}
	// "F" "no"
	// "T" "yes"

	// 等同于使用map.entries()
	for (let [key, value] of map) {
	  console.log(key, value);
	}
	// "F" "no"
	// "T" "yes"
b.Map 结构转为数组结构，比较快速的方法是使用扩展运算符（...）。
eg:	const map = new Map([
	  [1, 'one'],
	  [2, 'two'],
	  [3, 'three'],
	]);

	[...map.keys()]
	// [1, 2, 3]

	[...map.values()]
	// ['one', 'two', 'three']

	[...map.entries()]
	// [[1,'one'], [2, 'two'], [3, 'three']]

	[...map]
	// [[1,'one'], [2, 'two'], [3, 'three']]
c.结合数组的map方法、filter方法，可以实现Map的遍历和过滤（Map本身没有map和filter方法）。
eg:	const map0 = new Map()
	  .set(1, 'a')
	  .set(2, 'b')
	  .set(3, 'c');

	const map1 = new Map(
	  [...map0].filter(([k, v]) => k < 3)
	);
	// 产生 Map 结构 {1 => 'a', 2 => 'b'}

	const map2 = new Map(
	  [...map0].map(([k, v]) => [k * 2, '_' + v])
	    );
	// 产生 Map 结构 {2 => '_a', 4 => '_b', 6 => '_c'}
d.forEach
与数组的forEach方法类似，也可以实现遍历。forEach方法还可以接受第二个参数，用来绑定this。
eg:	const reporter = {
	  report: function(key, value) {
	    console.log("Key: %s, Value: %s", key, value);
	  }
	};

	map.forEach(function(value, key, map) {
	  this.report(key, value);
	}, reporter);

4.与其他数据结构的互相转换
a.Map转为数组
Map 转为数组最方便的方法，就是使用扩展运算符（...）。
eg:	const myMap = new Map()
	.set(true, 7)
  	.set({foo: 3}, ['abc']);
	[...myMap]
	// [ [ true, 7 ], [ { foo: 3 }, [ 'abc' ] ] ]
b.数组转为Map
将数组传入 Map 构造函数，就可以转为 Map。
eg:	new Map([
	  [true, 7],
	  [{foo: 3}, ['abc']]
	])
	// Map {
	//   true => 7,
	//   Object {foo: 3} => ['abc']
	// }
c.Map转为对象
如果所有 Map 的键都是字符串，它可以无损地转为对象。
eg:	function strMapToObj(strMap) {
	  let obj = Object.create(null);
	  for (let [k,v] of strMap) {
	    obj[k] = v;
	  }
	  return obj;
	}

	const myMap = new Map()
	  .set('yes', true)
	  .set('no', false);
	strMapToObj(myMap)
	// { yes: true, no: false }
d.对象转为 Map
eg:	function strMapToObj(strMap) {
	  let obj = Object.create(null);
	  for (let [k,v] of strMap) {
	    obj[k] = v;
	  }
	  return obj;
	}

	const myMap = new Map()
	  .set('yes', true)
	  .set('no', false);
	strMapToObj(myMap)
e.Map转为JSON
Map 的键名都是字符串，这时可以选择转为对象 JSON。
eg:	function strMapToJson(strMap) {
	  return JSON.stringify(strMapToObj(strMap));
	}

	let myMap = new Map().set('yes', true).set('no', false);
	strMapToJson(myMap)
	// '{"yes":true,"no":false}'
Map 的键名有非字符串，这时可以选择转为数组 JSON。
eg:	function mapToArrayJson(map) {
	  return JSON.stringify([...map]);
	}

	let myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);
	mapToArrayJson(myMap)
	// '[[true,7],[{"foo":3},["abc"]]]'
f.JSON转为Map
JSON 转为 Map，正常情况下，所有键名都是字符串。
eg:	function jsonToStrMap(jsonStr) {
	  return objToStrMap(JSON.parse(jsonStr));
	}

	jsonToStrMap('{"yes": true, "no": false}')
	// Map {'yes' => true, 'no' => false}
但是，有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 JSON 的逆操作。
eg:	function jsonToMap(jsonStr) {
	  return new Map(JSON.parse(jsonStr));
	}

	jsonToMap('[[true,7],[{"foo":3},["abc"]]]')
	// Map {true => 7, Object {foo: 3} => ['abc']}

(4)WeakMap
1.含义
WeakMap结构与Map结构类似，也是用于生成键值对的集合。WeakMap与Map的区别有两点。
a.WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。
eg:	const map = new WeakMap();
	map.set(1, 2)
	// TypeError: 1 is not an object!
	map.set(Symbol(), 2)
	// TypeError: Invalid value used as weak map key
	map.set(null, 2)
	// TypeError: Invalid value used as weak map key
b.WeakMap的键名所指向的对象，不计入垃圾回收机制。

2.WeakMap的语法
WeakMap 与 Map 在 API 上的区别主要是两个，一是没有遍历操作（即没有keys()、values()和entries()方法），也没有size属性。因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。二是无法清空，即不支持clear方法。因此，WeakMap只有四个方法可用：get()、set()、has()、delete()。
eg:	const wm = new WeakMap();

	// size、forEach、clear 方法都不存在
	wm.size // undefined
	wm.forEach // undefined
	wm.clear // undefined
3.WeakMap的示例
4.WeakMap的用途
a.WeakMap 应用的典型场合就是 DOM 节点作为键名。
b.WeakMap 的另一个用处是部署私有属性。