十.Symbol
(1)概述
1.ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。
eg:	let s = Symbol();

	typeof s
	// "symbol"

2.Symbol函数前不能使用new命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。
☆Symbol函数可以接受一个字符串作为参数，如果 Symbol的参数是一个对象，就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。
3.Symbol函数的参数只是表示对当前Symbol值的描述，因此相同参数的Symbol函数的返回值是不相等的。
eg:	// 没有参数的情况
	let s1 = Symbol();
	let s2 = Symbol();

	s1 === s2 // false

	// 有参数的情况
	let s1 = Symbol('foo');
	let s2 = Symbol('foo');

	s1 === s2 // false

4.Symbol 值不能与其他类型的值进行运算，会报错。但是，Symbol 值可以显式转为字符串。另外，Symbol 值也可以转为布尔值，但是不能转为数值。

(3)作为属性名的Symbol
1.由于每一个 Symbol 值都是不相等的，这意味着Symbol值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。Symbol值作为属性名时，该属性还是公开属性，不是私有属性。
eg:	let mySymbol = Symbol();

	// 第一种写法
	let a = {};
	a[mySymbol] = 'Hello!';

	// 第二种写法
	let a = {
	  [mySymbol]: 'Hello!'
	};

	// 第三种写法
	let a = {};
	Object.defineProperty(a, mySymbol, { value: 'Hello!' });

	// 以上写法都得到同样结果
	a[mySymbol] // "Hello!"
注意:Symbol 值作为对象属性名时，不能用点运算符。在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。
2.Symbol 类型还可以用于定义一组常量，保证这组常量的值都是不相等的。

(3)实例: 消除魔术字符串
魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。常用的消除魔术字符串的方法，就是把它写成一个变量。
eg:	const shapeType = {
	  triangle: Symbol()
	};

	function getArea(shape, options) {
	  let area = 0;
	  switch (shape) {
	    case shapeType.triangle:
	      area = .5 * options.width * options.height;
	      break;
	  }
	  return area;
	}

	getArea(shapeType.triangle, { width: 100, height: 100 });

(4)属性名的遍历
1.Symbol作为属性名，该属性不会出现在for...in、for...of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。
eg:	const obj = {};
	let a = Symbol('a');
	let b = Symbol('b');

	obj[a] = 'Hello';
	obj[b] = 'World';

	const objectSymbols = Object.getOwnPropertySymbols(obj);

	objectSymbols
	// [Symbol(a), Symbol(b)]

2.Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。
eg:	let obj = {
	  [Symbol('my_key')]: 1,
	  enum: 2,
	  nonEnum: 3
	};

	Reflect.ownKeys(obj)
	//  ["enum", "nonEnum", Symbol(my_key)]

3.由于以 Symbol 值作为名称的属性，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。
eg:	let size = Symbol('size');

	class Collection {
	  constructor() {
	    this[size] = 0;
	  }

	  add(item) {
	    this[this[size]] = item;
	    this[size]++;
	  }

	  static sizeOf(instance) {
	    return instance[size];
	  }
	}

	let x = new Collection();
	Collection.sizeOf(x) // 0

	x.add('foo');
	Collection.sizeOf(x) // 1

	Object.keys(x) // ['0']
	Object.getOwnPropertyNames(x) // ['0']
	Object.getOwnPropertySymbols(x) // [Symbol(size)]

(5)Symbol.for(),Symbol.keyFor()
1.Symbol.for():有时，我们希望重新使用同一个 Symbol 值，Symbol.for方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。
eg:	let s1 = Symbol.for('foo');
	let s2 = Symbol.for('foo');

	s1 === s2 // true
注意：Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for("cat")30 次，每次都会返回同一个 Symbol 值，但是调用Symbol("cat")30 次，会返回30个不同的Symbol值。Symbol.for为Symbol值登记的名字，是全局环境的，可以在不同的 iframe 或 service worker 中取到同一个值。

2.Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。
eg:	let s1 = Symbol.for("foo");
	Symbol.keyFor(s1) // "foo"

	let s2 = Symbol("foo");
	Symbol.keyFor(s2) // undefined

☆(6)实例:模板的Singleton模式
Singleton模式指的是调用一个类，任何时候返回的都是同一个实例。

(7)内置的Symbol值
1.Symbol.hasInstance：对象的Symbol.hasInstance属性，指向一个内部方法。当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法。比如，foo instanceof Foo在语言内部，实际调用的是Foo[Symbol.hasInstance](foo)。
eg:	class MyClass {
	  [Symbol.hasInstance](foo) {
	    return foo instanceof Array;
	  }
	}

	[1, 2, 3] instanceof new MyClass() // true

2.Symbol.isConcatSpreadable
a.表示该对象用于Array.prototype.concat()时，是否可以展开。
eg:	let arr1 = ['c', 'd'];
	['a', 'b'].concat(arr1, 'e') // ['a', 'b', 'c', 'd', 'e']
	arr1[Symbol.isConcatSpreadable] // undefined

	let arr2 = ['c', 'd'];
	arr2[Symbol.isConcatSpreadable] = false;
	['a', 'b'].concat(arr2, 'e') // ['a', 'b', ['c','d'], 'e']

注意：数组的默认行为是可以展开，Symbol.isConcatSpreadable默认等于undefined。该属性等于true时，也有展开的效果。

b.类似数组的对象正好相反，默认不展开。它的Symbol.isConcatSpreadable属性设为true，才可以展开。
eg:	let obj = {length: 2, 0: 'c', 1: 'd'};
	['a', 'b'].concat(obj, 'e') // ['a', 'b', obj, 'e']

	obj[Symbol.isConcatSpreadable] = true;
	['a', 'b'].concat(obj, 'e') // ['a', 'b', 'c', 'd', 'e']

c.Symbol.isConcatSpreadable属性也可以定义在类里面。
eg:	class A1 extends Array {
	  constructor(args) {
	    super(args);
	    this[Symbol.isConcatSpreadable] = true;
	  }
	}
	class A2 extends Array {
	  constructor(args) {
	    super(args);
	  }
	  get [Symbol.isConcatSpreadable] () {
	    return false;
	  }
	}
	let a1 = new A1();
	a1[0] = 3;
	a1[1] = 4;
	let a2 = new A2();
	a2[0] = 5;
	a2[1] = 6;
	[1, 2].concat(a1).concat(a2)
	// [1, 2, 3, 4, [5, 6]]

3.Symbol.species
a.对象的Symbol.species属性，指向一个构造函数。创建衍生对象时，会使用该属性。
eg:	class MyArray extends Array {
	}

	const a = new MyArray(1, 2, 3);
	const b = a.map(x => x);
	const c = a.filter(x => x > 1);

	b instanceof MyArray // true
	c instanceof MyArray // true
上面代码中，子类MyArray继承了父类Array，a是MyArray的实例，b和c是a的衍生对象。你可能会认为，b和c都是调用数组方法生成的，所以应该是数组（Array的实例），但实际上它们也是MyArray的实例。

Symbol.species属性就是为了解决这个问题而提供的。现在，我们可以为MyArray设置Symbol.species属性。
eg:	class MyArray extends Array {
	  static get [Symbol.species]() { return Array; }
	}

	const a = new MyArray();
	const b = a.map(x => x);

	b instanceof MyArray // false
	b instanceof Array // true

b.Symbol.species的作用在于，实例对象在运行过程中，需要再次调用自身的构造函数时，会调用该属性指定的构造函数。它主要的用途是，有些类库是在基类的基础上修改的，那么子类使用继承的方法时，作者可能希望返回基类的实例，而不是子类的实例。

4.Symbol.match
a.对象的Symbol.match属性，指向一个函数。当执行str.match(myObject)时，如果该属性存在，会调用它，返回该方法的返回值。
eg:	String.prototype.match(regexp)
	// 等同于
	regexp[Symbol.match](this)

	class MyMatcher {
	  [Symbol.match](string) {
	    return 'hello world'.indexOf(string);
	  }
	}

	'e'.match(new MyMatcher()) // 1

5.Symbol.replace
对象的Symbol.replace属性，指向一个方法，当该对象被String.prototype.replace方法调用时，会返回该方法的返回值。
eg:	String.prototype.replace(searchValue, replaceValue)
	// 等同于
	searchValue[Symbol.replace](this, replaceValue)

	const x = {};
	x[Symbol.replace] = (...s) => console.log(s);

	'Hello'.replace(x, 'World') // ["Hello", "World"]

6.Symbol.search
对象的Symbol.search属性，指向一个方法，当该对象被String.prototype.search方法调用时，会返回该方法的返回值。
eg:	String.prototype.search(regexp)
	// 等同于
	regexp[Symbol.search](this)

	class MySearch {
	  constructor(value) {
	    this.value = value;
	  }
	  [Symbol.search](string) {
	    return string.indexOf(this.value);
	  }
	}
	'foobar'.search(new MySearch('foo')) // 0

7.Symbol.split
对象的Symbol.split属性，指向一个方法，当该对象被String.prototype.split方法调用时，会返回该方法的返回值。
eg:	String.prototype.split(separator, limit)
	// 等同于
	separator[Symbol.split](this, limit)

	class MySplitter {
	  constructor(value) {
	    this.value = value;
	  }
	  [Symbol.split](string) {
	    let index = string.indexOf(this.value);
	    if (index === -1) {
	      return string;
	    }
	    return [
	      string.substr(0, index),
	      string.substr(index + this.value.length)
	    ];
	  }
	}

	'foobar'.split(new MySplitter('foo'))
	// ['', 'bar']

	'foobar'.split(new MySplitter('bar'))
	// ['foo', '']

	'foobar'.split(new MySplitter('baz'))
	// 'foobar'

8.Symbol.iterator
对象的Symbol.iterator属性，指向该对象的默认遍历器方法。
eg:	const myIterable = {};
	myIterable[Symbol.iterator] = function* () {
	  yield 1;
	  yield 2;
	  yield 3;
	};

	[...myIterable] // [1, 2, 3]

9.Symbol.toPrimitive
对象的Symbol.toPrimitive属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。

Symbol.toPrimitive被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。

Number：该场合需要转成数值
String：该场合需要转成字符串
Default：该场合可以转成数值，也可以转成字符串
eg:	let obj = {
	  [Symbol.toPrimitive](hint) {
	    switch (hint) {
	      case 'number':
	        return 123;
	      case 'string':
	        return 'str';
	      case 'default':
	        return 'default';
	      default:
	        throw new Error();
	     }
	   }
	};

	2 * obj // 246
	3 + obj // '3default'
	obj == 'default' // true
	String(obj) // 'str'

10.Symbol.toStringTag
a.对象的Symbol.toStringTag属性，指向一个方法。在该对象上面调用Object.prototype.toString方法时，如果这个属性存在，它的返回值会出现在toString方法返回的字符串之中，表示对象的类型。也就是说，这个属性可以用来定制[object Object]或[object Array]中object后面的那个字符串。
eg:	// 例一
	({[Symbol.toStringTag]: 'Foo'}.toString())
	// "[object Foo]"

	// 例二
	class Collection {
	  get [Symbol.toStringTag]() {
	    return 'xxx';
	  }
	}
	let x = new Collection();
	Object.prototype.toString.call(x) // "[object xxx]"

b.ES6 新增内置对象的Symbol.toStringTag属性值如下。
-JSON[Symbol.toStringTag]：'JSON'
-Math[Symbol.toStringTag]：'Math'
-Module 对象M[Symbol.toStringTag]：'Module'
-ArrayBuffer.prototype[Symbol.toStringTag]：'ArrayBuffer'
-DataView.prototype[Symbol.toStringTag]：'DataView'
-Map.prototype[Symbol.toStringTag]：'Map'
-Promise.prototype[Symbol.toStringTag]：'Promise'
-Set.prototype[Symbol.toStringTag]：'Set'
-%TypedArray%.prototype[Symbol.toStringTag]：'Uint8Array'等
-WeakMap.prototype[Symbol.toStringTag]：'WeakMap'
-WeakSet.prototype[Symbol.toStringTag]：'WeakSet'
-%MapIteratorPrototype%[Symbol.toStringTag]：'Map Iterator'
-%SetIteratorPrototype%[Symbol.toStringTag]：'Set Iterator'
-%StringIteratorPrototype%[Symbol.toStringTag]：'String Iterator'
-Symbol.prototype[Symbol.toStringTag]：'Symbol'
-Generator.prototype[Symbol.toStringTag]：'Generator'
-GeneratorFunction.prototype[Symbol.toStringTag]：'GeneratorFunction'

11.Symbol.unscopables
对象的Symbol.unscopables属性，指向一个对象。该对象指定了使用with关键字时，哪些属性会被with环境排除。